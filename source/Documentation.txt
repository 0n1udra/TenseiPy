How to construct storyline.

# Import most used functions like siprint, game_action, etc
from game_files.game_functions import *
# Import the next chapter to continue to.
from chapters.tensei_2 import ch2_dwargon
# Import pre-defined playable actions.
from game_maps.game_location import *

NOTE: Game chapters are not same as manga chapters. See code comments for loosely matching manga chapter.
def ChapterXX():

    # Actions from game_maps will be able be playable by passing cave_actions in class.
    class in_cave(cave_actions):
        __location = 'Sealed Cave'  # Update location.

        def __init__(self):
            # Regular message used for talking to other characters, even when using telepathy add ~to start and end~.
            sprint("What a dark cave, what to do...what to do.")
            # Indented message, usually for inner dialogue and game functions.
            siprint("Moving on...")

            # Update relevant actions player can take.
            game.actions(self)

        # Using functions means no sub paths or usage of __subs list.
        # Action with '_' is just for easy indication while looking at the code to see which actions will progress the storyline further, also used for debug mode.
        class _exit_cave(cave_actions):
            # Sub lists are substitute inputs for the same actions. Adds some player freedom.
            # E.g. 'eat grass', 'predate grass', or 'eat more grass' run the same function for that action (sub path).
            __subs = ['leave cave', 'move on', 'leave the cave', 'exit cave']

            def __init__(self):
                sprint("Where to go now?")
                game.actions(self)

            class look_around():
                __subs = ['do me', 'try me']
                def __init__(self):
                    sprint("Nothing to see here.")

                    # Enables 'x_locked_action' to be visible on HUD and playable.
                    action_playable('locked_action', True)


            # x_ or _x_ classes/functions are unplayable (and hidden from HUD)
            class x_scream():
                def __init__(self):
                    siprint("I CAN'T SEE ANYTHING!!!")

            # hfunc or _hfunc are hidden on the action menu (still playable, just not visible on HUD)
            class hfunc_jump:
                __subs = ['hop', 'bounce']
                def __init__(self):
                    # Add mobs to current section. (adds 10 Direwolves). Below are other functions, like: mob_status, mobs_cleared, and mobs_reset.
                    mobs_add(['10* direwolf'])

                    # Save game variables. Uses rimuru.game_conditions dictionary.
                    game.conditions('found_hidden', True)

                    # Loading dots animation (only works when textcrawl is True)
                    dots(5, 5)

                    siprint("ooooooooohhh!, a secret action!")

                    # If first time playing action.
                    if not played_action(self):
                        print("First time playing secret action.")

                    # Only if action has been played already.
                    if played_action(self):
                        print("Played this action already")

                    # Add item to player inventory.
                    rimuru.add_inventory('special item')

                    # Add attribute (skill/resistances/etc).
                    rimuru.add_attribute('special skill')

                    # Clears __subs, to make action usable only once (only works with classes).
                    clear_subs(self)

                    # Move story to new section.
                    game.actions(secret_place())


> Start with ChapterXX function with Chapter_XX class to start with.
> Evoke game_action to update available actions for player and to start a new section of story.
> Pass in Rimuru_Tempest object when starting chapter.
> Functions and class starting with _ will progress the storyline, and needs to lead to the next chapter.
> game_action grabs functions and classes in passed in object, then shows the user the available actions.


Reading Variable Names:
    Name []                 -- List
    Name {}                 -- Dictionary
    Name ()                 -- Set
    Name True/False         -- boolean
    Name()                  -- Function
    Name:                   -- Class

When I say attribute it means skills and/or resistances.
In function docstring's Usage section, '>' means example of user input in game.

===== functions.py
    update_rimuru()         -- Need to update local rimuru object for this file.
    game_hud()              -- Shows current mimic, targeted and available actions.
    actions()               -- Takes care of user input and runs corresponding functions, and shows user HUDs.
    conditions)             -- Set and fetch game variables, variables that effect game mechanics, like if player played a path already, or killed someone, or did/didn't do something that you need to check later for other actions.
    last_use_skill()        -- Check what was the last successfully used skill/item.
    mobs_add([])            -- Adds new character object to current game level. Must pass in list.
    mob_status()            -- Returns True if mob is in active_mobs list.
    mobs_cleared()          -- Returns True if player cleared all mobs. Usually used for to let player continue on or not.
    mobs_reset()            -- Reset active_mobs and targeted_mobs list.
    mob_obj()               -- Get object from active_mobs list.
    continue_to()           -- Saves game and asks if user wants to continue to next section.
    clear_subs()            -- Clear's action's __subs list.

    game_restart()          -- Restart game.
    game_exit()             -- Exit game.
    game_save()             -- Saves game state by pickling Rimuru_Tempest object (the player).
    game_load()             -- Load user save.
    game_over()             -- Player dies, invalidates save file before deleting it.
    set_hud()               -- Show available actions for player (not the hfunc ones).
    set_art()               -- Enable ASCII art, usually disable for less screen clutter. But they look cool!
    set_textcrawl           -- Whether or not to have the textcrawl effect. A typewriter like effect where each letter is printed to screen one by one, this does not include game messages like stats, inv, acquired messages, crafting, etc.
    set_hints()             -- Show game hints.
    set_hardcore            -- So far only disables action menu and so it can't be turned back on, disable hardcore to enable menu.

    sprint()                -- Delays text, for easier reading if player chooses. Using sys.stdout.write() and sys.stdout.flush().
    siprint()               -- Indents printout using sprint(). Used for player thoughts, Great Sage or other game messages.
    iprint()                -- Indented printout with no textcrawl even if enabled.
    dost()                  -- Loading dot animation.
    idots()                 -- Loading dot animation with indentation.
    show_history()          -- Show last x lines from storyline.
    show_art()              -- Pass in string that matches variable name in game_art.py file, replace _ with spaces when passing in name. E.g. show_art('great sage'). Doesn't work with variables within classes.
    show_start_banner()     -- Shows game's start banner.
    show_settings()         -- Shows game setting commands and current states.
    show_help()             -- Shows help page.
    show_rank_chart()       -- Show in-universe ranking and levels.


===== extra.py
    get_random()            -- Used for probability.
    get_any()               -- If input matches anything in a list.
    on_off()                -- Returns on/off string based in passed in boolean.
    format_info()           -- Formats info from variables for info_page for game objects.
    tbc()                   -- Prints out To be continued.


===== extra.py
    get_random()            -- Used for probability.
    get_any()               -- If input matches anything in a list.
    on_off()                -- Returns on/off string based in passed in boolean.
    format_info()           -- Formats info from variables for info_page for game objects.
    tbc()                   -- Prints out To be continued.


===== character.py
Go to file to read comments for class variables.
    __str__()               -- Returns lowercase of name variable.
    set_start_state()       -- Adds starting attributes to character
    get_object()            -- Returns game corresponding game object, usually used for when inputting with string.
    check_acquired()        -- Check if passed in list or string for _check_acquired.
    _check_acquired()       -- Checks if character has object (attribute/item).
    set_status()         -- Update status variable.


===== attributes.py
    attribute_generator()   -- Yields all attributes character has access to. Also used for printing out with show_attributes()
    show_attributes()       -- Shows character's attributes, can also show mimicked character's attributes.
    add_attribute()         -- Add new attribute.
    remove_attribute()      -- Remove attribute.
    upgrade_attribute       -- Upgrade attribute.
    check_resistance()      -- Checks if have resistance to attack.
    use()                   -- Uses specified skill.


===== combat.py
    set_targets()           -- Set targets to be focused.
    attack()                -- Attacks targets (including focused). Also checks resistance to attack.


===== info.py
    show_info()             -- Shows info page for game objects.
    update_info()           -- Update character info variable.
    update_name()           -- Update character's name.
    update_lname()          -- Update character's family (last) name.
    update_level()          -- Update character's level, which will also update ranking.
    add_protection()        -- Add a divine protect (blessing) to character.
    check_if_player()       -- Check if current object being manipulated is player object (Rimuru_Tempest).


===== inventory.py
    inventory_generator()   -- Yields character's inventory objects.
    update_inv_capacity()   -- Calculates current inventory capacity from all items acquired.
    show_inventory()        -- Prints out inventory items separated by category.
    add_inventory()         -- Add item to inventory.
    remove_inventory()      -- Removes item from inventory.
    craft_item()            -- Craft game item.


===== map.py
    add_played_action()     -- Adds played actions by user to a set().
    get_loction_variable()  -- Gets __location variable from action class.
    get_location()          -- returns current_location from character object.
    get_map()               --
    update_location()       -- Update characters current_location variable.


===== map.py
    add_played_action()     -- Adds played actions by user to a set().
    get_loction_variable()  -- Gets __location variable from action class.
    get_location()          -- returns current_location from character object.
    get_map()               --
    update_location()       -- Update characters current_location variable.


===== subordinates.py
    subordinates_generator()-- Yields subordinates character object.
    add_subordinate()       -- Add new subordinate.


===== game_art.py
    slime                   -- Rimuru.
    great_sage              -- Great Sage.
    magic_sense             -- When acquired and use magic sense.
    cave_veldora            -- Veldora introducing himself.


===== characters.py
    Rimuru_Tempest:         -- Player character.
        mimic_generator()   -- Yields character object acquired for mimicry.
        mimic_object()      -- Returns mimic skill object from attributes dictionary.
        show_mimics()       -- Show acquired mimics.
        add_mimic()         -- Adds new character object to acquired_mimicries dictionary.
        use_mimic()         -- Activate mimicry.
        eat_target()        -- Predates inputted and focused targets. Either adds skill, item, or character.

    Veldora_Tempest:
    Eren_Grimwold:
    Kaval:
    Gido:

    Tempest_Serpent:
    Giant_Bat:
    Evil_Centipede:
    Black_Spider:
    Direwolf:
    Goblin:
    Hobgoblin:


===== items.py
Item:                       -- Item parent class.
    name str                -- Item name.
    status str              -- Item status, active, passive, etc.
    item_type str           -- Item type: Items, Materials, Potions, or Misc.
    damage_type str         -- Damage type for combat mechanics.
    damage_level int        -- Damage level.
    quantity 0              -- Total item amount have.
    quantity_add 1          -- Amount to add at a time.
    inv_capacity_add 0.1    -- Capacity % to add to total inventory capacity.
    info_page str           -- Item info, includes: name, usage, and appearance.
    description str         -- Description of item.
    usage str               -- Item usages.
    appearance str          -- Item appearance.
    recipe {}               -- Recipe to craft item {'item_name', quantity}'.
    ingredient_for []       -- Part of other item'ss crafting recipe.
    use_requirements {}     -- Prerequisites to use item {'skill/item', quantity}.
    object_type str         -- Game object type, 'item'.
    initialized False       -- If object is initialized.

    get_description()       -- Get's item description.
    show_acquired_msg()     -- Prints out item acquired message.
    update_info()           -- Update item info page.

:Items:
    Water:
    Hipokte_Grass:
    Magic_ore:
    Magic_Sword:


===== skills.py
Skill:
    name str                -- Skill name.
    type str                -- Skill type, e.g. Activatable Skill, Passive, etc.
    skill_level str         -- Skill level like: Common Skill, Extra Skill, etc
    damage_level 1          -- Skill damage level.
    damage_type str         -- Skill damage types.
    info_page str           -- Information page for skill.
    description str         -- Skill description.
    evolution str           -- Evolution line.
    abilities str           -- Skill abilities description.
    acquired_msg str        -- Acquired message.
    status False            -- Skill active status, active, passive, etc.
    use_requirements {}     -- Prerequisites to use Skill, items, other skills, etc.
    quantity int            -- Variable for check_acquired function.
    predate_copy True       -- Able to copy with predator skill.
    sub_skills {}           -- Sub skills.
    object_type             -- Game object type, 'attribute'.
    initialized False       -- If object has been initialized.

    __str__()               -- Returns lowercase name variable.
    use()                   -- Use skill, also checks if meets prerequisites.
    activate_skill()        -- Update skill status variable, by default to 'Active'.
    deactivate_skill()      -- Resets skill status variable.
    update_info()           -- Update skill info page.
    show_acquired_msg()     -- Shows skill acquired message to '' (empty string).

Manas:
Ultimate:
Unique:
Extra:
Common:
Intrinsic:
Resistance:
    resist_types []         -- Resistance types. E.g. Pain, Melee

:Skills:
    Ciel:

    Raphael:

    Mimicry:
    Predator:
    Great_Sage:

    Sage:
    Magic_Perception:
    Water_Manipulation:
    Vampirism:

    Absorb_Dissolve:
    Self_Regeneration:
    Sticky_Thread:
    Steel_Thread:
    Sense_Heat_Source:

    Hydraulic_Propulsion:
    Water_Blade:
    Water_Bullet:
    Poisonous_Breath:
    Paralyzing_Breath:
    Ultrasound_Waves:

    Resist_Pain:
    Resist_Melee:
    Resist_Electricity:
    Resist_Temperature:
    Resist_Poison:
